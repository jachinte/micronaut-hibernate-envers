buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.hibernate:hibernate-gradle-plugin:5.4.10.Final"
    classpath "com.github.jengelman.gradle.plugins:shadow:5.0.0"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.4.RELEASE"
  }
}

plugins {
  id "application"
  id "net.ltgt.apt-eclipse" version "0.21"
  id "com.chrisgahlert.gradle-dcompose-plugin" version "0.15.3"
}

apply plugin: "org.hibernate.orm"
apply plugin: "com.github.johnrengelman.shadow"

application {
  mainClassName = "com.example.myservice.Application"
}

repositories {
  jcenter()
  mavenCentral()
}

group = "com.example.${rootProject.name}"
version = "0.1.0"

def postgresPort = 5432
def postgresUsername = "dbuser"
def postgresPassword = "dbpass"
def postgresDatabase = "db"
def db_variables = [
    "db-name": "$postgresDatabase",
    "db-username": "$postgresUsername",
    "db-password": "$postgresPassword"
]

ext {
  lombokVersion = "1.18.6"
  micronautVersion = "2.0.0.M2"
  javaxPersistenceApiVersion = "2.2"
  enversVersion = "5.4.10.Final"
}

dependencies {
  // Ensure lombok is first to prevent issues between Micronaut data and lombok
  testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
  annotationProcessor "org.projectlombok:lombok:$lombokVersion"
  compileOnly "org.projectlombok:lombok:$lombokVersion"
  testCompileOnly "org.projectlombok:lombok:$lombokVersion"

  implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
  annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
  testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")

  testAnnotationProcessor "io.micronaut:micronaut-inject-java"
  annotationProcessor "io.micronaut:micronaut-inject-java"
  annotationProcessor "io.micronaut:micronaut-graal"
  annotationProcessor "io.micronaut:micronaut-validation"
  annotationProcessor "io.micronaut.data:micronaut-data-processor"
  annotationProcessor "javax.persistence:javax.persistence-api:$javaxPersistenceApiVersion"

  implementation "io.micronaut:micronaut-inject"
  implementation "io.micronaut:micronaut-validation"
  implementation "io.micronaut:micronaut-runtime"
  implementation "io.micronaut:micronaut-http-client"
  implementation "io.micronaut:micronaut-http-server-netty"
  implementation "io.micronaut.data:micronaut-data-hibernate-jpa", {
    exclude group: "io.micronaut.configuration", module: "micronaut-hibernate-jpa"
  }
  implementation "io.micronaut.configuration:micronaut-hibernate-jpa", {
    exclude group: "io.micronaut.configuration", module: "micronaut-hibernate-jpa-spring"
  }
  implementation "org.hibernate:hibernate-envers:$enversVersion"
  implementation "io.micronaut.configuration:micronaut-micrometer-core"
  implementation "io.micronaut.configuration:micronaut-micrometer-registry-statsd"
  implementation "io.micronaut.configuration:micronaut-liquibase"
  implementation "com.mattbertolini:liquibase-slf4j:1.2.1"
  implementation "commons-validator:commons-validator:1.6"
  runtime "ch.qos.logback:logback-classic:1.2.3"
  runtime "org.postgresql:postgresql:42.2.5"
  runtime "io.micronaut.configuration:micronaut-jdbc-hikari"
  runtime "io.micronaut.cache:micronaut-cache-ehcache"
}

dcompose {
  database {
    image = "postgres:9"
    portBindings = ["$postgresPort:5432"]
    preserveVolumes = false
    env = [
        "POSTGRES_USER=$postgresUsername",
        "POSTGRES_PASSWORD=$postgresPassword",
        "POSTGRES_DB=$postgresDatabase"
    ]
  }
}

run{
  dependsOn startDatabaseContainer
  finalizedBy stopDatabaseContainer
  doFirst {
    environment db_variables
  }
}


hibernate {
  enhance {
    enableLazyInitialization= true
    enableDirtyTracking = true
    enableAssociationManagement = true
    enableExtendedEnhancement = false
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
  options.compilerArgs.add("-parameters")
}

shadowJar {
  mergeServiceFiles()
}
